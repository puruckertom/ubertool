import unittest

import numpy.testing as npt
import pandas as pd

from .. import agdrift as agdrift_model

# create empty pandas dataframes to create empty sip object for testing
df_empty = pd.DataFrame()
# create an empty sip object
agdrift_empty = agdrift_model.Agdrift(df_empty, df_empty)

rtol = 1e-5 # set relative tolerance level for npt.assert_allclose assertion tests
test = {}

class TestAgdrift(unittest.TestCase):
    """
    IEC unit tests.
    """
    def setUp(self):
        """
        setup the test as needed
        e.g. pandas to open agdrift qaqc csv
        Read qaqc csv and create pandas DataFrames for inputs and expected outputs
        :return:
        """
        pass

    def tearDown(self):
        """
        teardown called after each test
        e.g. maybe write test results to some text file
        :return:
        """
        pass

    def test_tier_I_aerial(self):
        """
        unittest for function agdrift.tier_I_aerial
        :return:
        """
        try:
            agdrift_empty.ecosystem_type = pd.Series(['EPA Pond'])
            agdrift_empty.application_method = pd.Series(['Aerial'])
            agdrift_empty.drop_size = pd.Series(['Very Coarse'])
            result = agdrift_empty.tier_I_aerial()
            expected = [[agdrift_empty.pond_aerial_c2vc], [3],
                        [[0.06878999999999999, 0.06250499999999999, 0.05622, 0.052035, 0.047850000000000004,
                              0.044875000000000005, 0.04190000000000001, 0.039685, 0.037469999999999996, 0.03574,
                              0.03401, 0.03262, 0.03123, 0.03008, 0.028929999999999997, 0.027925, 0.026920000000000003,
                              0.025985, 0.02505, 0.02418, 0.02331, 0.02253, 0.02175, 0.02109, 0.02043, 0.019865,
                              0.019299999999999998, 0.018799999999999997, 0.0183, 0.01784, 0.01738, 0.016955, 0.01653,
                              0.016135, 0.01574, 0.015375000000000002, 0.015009999999999999, 0.014674999999999999,
                              0.014339999999999999, 0.014034999999999999, 0.01373, 0.013455, 0.01318,
                              0.012930000000000002, 0.01268, 0.012445, 0.01221, 0.011995, 0.011779999999999999,
                              0.011575, 0.01137, 0.011179999999999999, 0.01099, 0.010815000000000002, 0.01064,
                              0.010474999999999998, 0.01031, 0.010154999999999999, 0.01, 0.00986, 0.00972, 0.009588,
                              0.009455999999999999, 0.009332, 0.009208, 0.0090925, 0.008977, 0.008869, 0.008761,
                              0.00866, 0.008559, 0.008464000000000001, 0.008369, 0.0082795, 0.00819, 0.008105,
                              0.008020000000000001, 0.007939, 0.007858, 0.0077815, 0.007705, 0.007632, 0.007559,
                              0.0074895, 0.0074199999999999995, 0.0073535, 0.007287, 0.0072239999999999995, 0.007161,
                              0.0070999999999999995, 0.007039, 0.006980999999999999, 0.006923, 0.006867000000000001,
                              0.006811, 0.006757, 0.006703, 0.006651000000000001, 0.006599000000000001,
                              0.006548000000000001, 0.006497, 0.006448000000000001, 0.006399, 0.0063514999999999995,
                              0.006304, 0.0062575, 0.0062109999999999995, 0.0061660000000000005, 0.006121,
                              0.0060775000000000004, 0.006034, 0.005991, 0.005948, 0.0059065, 0.005865, 0.005824,
                              0.005783, 0.005743000000000001, 0.005703000000000001, 0.0056645, 0.005626,
                              0.005587999999999999, 0.00555, 0.0055130000000000005, 0.005476, 0.005439499999999999,
                              0.005403, 0.005367500000000001, 0.005332, 0.005297499999999999, 0.005263,
                              0.0052285000000000005, 0.005194, 0.0051605, 0.0051270000000000005, 0.005094499999999999,
                              0.005062, 0.00503, 0.004998, 0.0049665, 0.004935, 0.0049045, 0.004874, 0.0048445,
                              0.004815, 0.004785500000000001, 0.004756, 0.0047275, 0.004699, 0.004671,
                              0.0046429999999999996, 0.004616, 0.004588999999999999, 0.0045625, 0.004536, 0.00451,
                              0.004484, 0.004459, 0.0044340000000000004, 0.004409, 0.004384, 0.00436, 0.004336,
                              0.004313, 0.0042899999999999995, 0.004267, 0.004244, 0.004222, 0.0042, 0.0041785,
                              0.004157, 0.004136, 0.004115, 0.004095, 0.004075, 0.004055, 0.004035,
                              0.0040160000000000005, 0.003997, 0.0039785, 0.00396, 0.003942, 0.003924, 0.0039065,
                              0.003889, 0.003872, 0.003855, 0.0038385000000000003, 0.003822, 0.003806, 0.00379,
                              0.0037745, 0.003759, 0.003744, 0.003729, 0.0037145, 0.0037, 0.0036855, 0.003671,
                              0.0036575, 0.003644, 0.0036305, 0.0036170000000000004, 0.003603500000000001, 0.00359,
                              0.0035765000000000016, 0.0035630000000000006, 0.003549499999999999, 0.0035360000000000014,
                              0.0035225000000000018, 0.003509, 0.003495499999999998, 0.003482000000000003,
                              0.0034685000000000033, 0.0034549999999999993, 0.0034414999999999997, 0.003428,
                              0.0034145000000000048, 0.003401000000000005, 0.003387500000000001, 0.0033740000000000016,
                              0.003360500000000002, 0.0033469999999999975, 0.0033335000000000027, 0.0033199999999999983,
                              0.0033065000000000034, 0.003293000000000008, 0.003279500000000004, 0.003266,
                              0.003252500000000005, 0.0032390000000000006, 0.0032255000000000057, 0.0032120000000000013,
                              0.0031984999999999974, 0.003185000000000002, 0.003171499999999998, 0.003158000000000012,
                              0.003144500000000008, 0.0031310000000000036, 0.0031175000000000087, 0.0031040000000000043,
                              0.0030905000000000004, 0.003077000000000005, 0.003063500000000001, 0.003049999999999997,
                              0.003036499999999993, 0.0030230000000000066, 0.0030095000000000026, 0.0029959999999999987,
                              0.0029824999999999947, 0.0029689999999999907, 0.002955500000000004, 0.002942000000000018,
                              0.002928500000000014, 0.0029150000000000096, 0.0029015000000000056, 0.0028880000000000017,
                              0.0028745000000000155, 0.002861000000000011, 0.002847500000000007, 0.002834000000000003,
                              0.0028204999999999992, 0.0028070000000000126, 0.0027935000000000086,
                              0.0027800000000000047, 0.0027665000000000007, 0.0027529999999999968, 0.00273950000000001,
                              0.002726000000000006, 0.0027125000000000022, 0.0026989999999999983, 0.002685499999999994,
                              0.0026720000000000077, 0.0026585000000000215, 0.002645000000000017, 0.002631500000000013,
                              0.002618000000000009, 0.0026045000000000052, 0.0025910000000000186, 0.0025775000000000147,
                              0.0025640000000000107, 0.0025505000000000068, 0.002537000000000003, 0.002523500000000016,
                              0.0025100000000000122, 0.0024965000000000083, 0.0024830000000000043,
                              0.0024695000000000177, 0.002455999999999996, 0.0024425000000000098, 0.002428999999999988,
                              0.002415500000000037, 0.0024020000000000152, 0.002388500000000029, 0.0023750000000000073,
                              0.0023615000000000207, 0.002347999999999999, 0.0023345000000000128, 0.002320999999999991,
                              0.0023075000000000044]]]
            self.assertItemsEqual(result, expected)
        finally:
            pass
        return

    def test_tier_I_ground(self):
        """
        unittest for function agdrift.tier_I_ground
        :return:
        """
        try:
            agdrift_empty.ecosystem_type = pd.Series(['EPA Pond'])
            agdrift_empty.application_method = pd.Series(['Ground'])
            agdrift_empty.drop_size = pd.Series(['Fine'])
            agdrift_empty.boom_height = pd.Series(['High'])
            result = agdrift_empty.tier_I_ground()
            expected = [[agdrift_empty.pond_ground_high_vf2f], [5],
                        [[0.06164, 0.052074999999999996, 0.042510000000000006, 0.03838, 0.034249999999999996,
                              0.031805, 0.02936, 0.027715, 0.026070000000000003, 0.024855000000000002,
                              0.023639999999999998, 0.022685, 0.02173, 0.020949999999999996, 0.02017,
                              0.019514999999999998, 0.01886, 0.018295, 0.01773, 0.017235, 0.016739999999999998, 0.0163,
                              0.01586, 0.015470000000000001, 0.01508, 0.014725000000000002, 0.01437, 0.014045,
                              0.013720000000000001, 0.01343, 0.01314, 0.01287, 0.0126, 0.012349999999999998, 0.0121,
                              0.011865, 0.01163, 0.011415000000000002, 0.011200000000000002, 0.011000000000000001,
                              0.0108, 0.01061, 0.01042, 0.010244999999999999, 0.010069999999999999,
                              0.009904999999999999, 0.00974, 0.0095835, 0.009427, 0.009279500000000001, 0.009132,
                              0.0089925, 0.008853, 0.008720499999999999, 0.008588, 0.0084625, 0.008337, 0.008218,
                              0.008099, 0.007984999999999999, 0.007871, 0.007763, 0.0076549999999999995, 0.007552,
                              0.007449, 0.00735, 0.007251, 0.007157, 0.007063000000000001, 0.0069725, 0.006882,
                              0.006795500000000001, 0.0067090000000000006, 0.0066265, 0.0065439999999999995, 0.0064645,
                              0.006384999999999999, 0.006308499999999999, 0.006232, 0.0061585, 0.006085,
                              0.006014500000000001, 0.0059440000000000005, 0.005876, 0.005808, 0.005742499999999999,
                              0.005677, 0.005614, 0.005551, 0.00549, 0.005429000000000001, 0.0053705, 0.005312,
                              0.005255000000000001, 0.005198, 0.0051435000000000005, 0.005089, 0.0050360000000000005,
                              0.0049830000000000004, 0.0049315, 0.00488, 0.0048305, 0.0047810000000000005, 0.004733,
                              0.004685, 0.0046385, 0.004592, 0.004547, 0.004502, 0.0044585, 0.004415, 0.004373,
                              0.004331, 0.0042899999999999995, 0.004249, 0.004209, 0.004169, 0.0041305000000000005,
                              0.004092, 0.0040545, 0.004017, 0.0039805000000000005, 0.003944, 0.0039085,
                              0.0038729999999999997, 0.0038385000000000003, 0.003804, 0.0037705, 0.003737, 0.0037045,
                              0.0036720000000000004, 0.0036404999999999996, 0.003609, 0.003578, 0.0035470000000000002,
                              0.003517, 0.003487, 0.0034575, 0.003428, 0.0033994999999999997, 0.0033710000000000003,
                              0.0033435000000000006, 0.003316, 0.003289, 0.0032619999999999997, 0.0032355, 0.003209,
                              0.003183, 0.0031569999999999997, 0.003132, 0.003107, 0.0030825, 0.003058,
                              0.0030340000000000002, 0.00301, 0.0029869999999999996, 0.002964, 0.0029410000000000005,
                              0.002918, 0.0028959999999999997, 0.002874, 0.002852, 0.0028299999999999996, 0.002809,
                              0.002788, 0.002767, 0.002746, 0.002726, 0.002706, 0.002686, 0.002666, 0.002647,
                              0.0026279999999999997, 0.002609, 0.0025900000000000003, 0.0025715, 0.002553,
                              0.0025345000000000003, 0.002516, 0.0024985, 0.0024809999999999997, 0.0024635,
                              0.0024460000000000003, 0.002429, 0.002412, 0.0023955, 0.002379, 0.002363, 0.002347,
                              0.002331, 0.0023150000000000002, 0.0022995, 0.002284, 0.0022685, 0.002253, 0.002238,
                              0.002223, 0.0022085, 0.002194, 0.0021795, 0.002165, 0.0021504999999999996, 0.002136,
                              0.0021215, 0.0021069999999999995, 0.0020925000000000006, 0.002078, 0.0020634999999999994,
                              0.0020489999999999996, 0.002034499999999999, 0.0020199999999999997, 0.0020054999999999977,
                              0.0019910000000000006, 0.0019764999999999987, 0.0019619999999999993,
                              0.0019474999999999976, 0.001932999999999998, 0.0019185000000000007, 0.001903999999999999,
                              0.0018894999999999973, 0.001875, 0.0018604999999999982, 0.0018459999999999965,
                              0.0018314999999999948, 0.0018169999999999974, 0.0018025000000000003,
                              0.0017879999999999986, 0.0017735000000000012, 0.0017589999999999995,
                              0.0017444999999999978, 0.001729999999999996, 0.0017154999999999987, 0.001700999999999997,
                              0.0016864999999999953, 0.001671999999999998, 0.0016575000000000006, 0.0016429999999999988,
                              0.0016284999999999971, 0.0016139999999999954, 0.0015994999999999937, 0.001585000000000001,
                              0.0015704999999999992, 0.0015559999999999975, 0.0015414999999999956,
                              0.0015269999999999939, 0.0015124999999999921, 0.0014979999999999904,
                              0.0014834999999999976, 0.001468999999999996, 0.0014544999999999942, 0.0014399999999999925,
                              0.0014254999999999906, 0.0014109999999999978, 0.001396499999999996, 0.0013820000000000032,
                              0.0013675000000000015, 0.0013529999999999998, 0.0013384999999999981,
                              0.0013239999999999962, 0.0013094999999999945, 0.0012949999999999928, 0.0012805,
                              0.0012659999999999982, 0.0012514999999999965, 0.0012369999999999948,
                              0.0012224999999999931, 0.0012079999999999912, 0.0011934999999999895,
                              0.0011789999999999967, 0.001164499999999995, 0.0011499999999999933, 0.0011354999999999916,
                              0.0011209999999999987, 0.001106499999999997, 0.001091999999999995, 0.0010774999999999934,
                              0.0010629999999999917, 0.00104849999999999, 0.0010339999999999883, 0.0010195000000000043,
                              0.0010050000000000026, 0.000990500000000001, 0.0009759999999999991, 0.0009614999999999974,
                              0.0009469999999999956, 0.0009324999999999939, 0.0009179999999999922,
                              0.0009034999999999905, 0.0008889999999999886, 0.0008744999999999869,
                              0.0008599999999999852, 0.0008454999999999835, 0.0008309999999999817,
                              0.0008164999999999978, 0.0008019999999999961, 0.0007874999999999944,
                              0.0007729999999999926, 0.0007584999999999908, 0.0007439999999999891,
                              0.0007294999999999874]]]
            self.assertListEqual(result, expected)
        finally:
            pass
        return

    def test_tier_I_airblast(self):
        """
        unittest for function agdrift.tier_I_airblast
        :return:
        """
        try:
            agdrift_empty.ecosystem_type = pd.Series(['EPA Pond'])
            agdrift_empty.application_method = pd.Series(['Orchard/Airblast'])
            agdrift_empty.orchard_type = pd.Series(['Vineyard'])
            result = agdrift_empty.tier_I_airblast()
            expected = [[agdrift_empty.pond_airblast_vineyard], [8],
                        [[0.002433, 0.0020455, 0.001658, 0.001466, 0.0012740000000000002, 0.0011565, 0.001039,
                              0.00096125, 0.0008835, 0.00082735, 0.0007712, 0.0007285999999999999, 0.000686,
                              0.0006523999999999999, 0.0006188, 0.0005914999999999999, 0.0005641999999999999, 0.0005415,
                              0.0005188, 0.0004996, 0.00048039999999999997, 0.0004639, 0.00044740000000000003,
                              0.00043300000000000006, 0.00041860000000000004, 0.00040595, 0.00039329999999999996,
                              0.00038209999999999996, 0.00037089999999999996, 0.00036085, 0.0003508, 0.00034175,
                              0.0003327, 0.0003245, 0.0003163, 0.00030885, 0.0003014, 0.00029455000000000003, 0.0002877,
                              0.00028145, 0.00027519999999999997, 0.0002694, 0.0002636, 0.00025825, 0.0002529,
                              0.0002479, 0.0002429, 0.00023825, 0.00023359999999999999, 0.0002293, 0.000225, 0.00022095,
                              0.00021690000000000001, 0.00021310000000000003, 0.00020930000000000002,
                              0.00020569999999999999, 0.00020209999999999998, 0.00019874999999999998,
                              0.00019539999999999998, 0.00019224999999999998, 0.0001891, 0.00018610000000000002,
                              0.0001831, 0.00018025, 0.00017739999999999998, 0.0001747, 0.000172,
                              0.00016945000000000003, 0.0001669, 0.0001645, 0.00016209999999999998, 0.0001598,
                              0.0001575, 0.0001553, 0.0001531, 0.000151, 0.00014890000000000001, 0.0001469, 0.0001449,
                              0.000143, 0.0001411, 0.0001393, 0.0001375, 0.00013575, 0.000134, 0.00013230000000000002,
                              0.0001306, 0.000129, 0.0001274, 0.00012585, 0.0001243, 0.00012285, 0.0001214,
                              0.00011994999999999999, 0.0001185, 0.00011715, 0.0001158, 0.0001145, 0.0001132,
                              0.00011190000000000001, 0.0001106, 0.0001094, 0.0001082, 0.00010704999999999999,
                              0.0001059, 0.00010475, 0.0001036, 0.00010249999999999998, 0.0001014,
                              0.00010033999999999999, 9.928e-05, 9.826e-05, 9.724e-05, 9.6255e-05, 9.527e-05,
                              9.431500000000001e-05, 9.336e-05, 9.244e-05, 9.152e-05, 9.062500000000001e-05, 8.973e-05,
                              8.8865e-05, 8.800000000000001e-05, 8.716000000000001e-05, 8.632000000000001e-05,
                              8.551e-05, 8.47e-05, 8.390999999999999e-05, 8.312e-05, 8.236e-05, 8.16e-05,
                              8.085500000000001e-05, 8.011e-05, 7.939500000000001e-05, 7.868e-05, 7.798e-05,
                              7.727999999999999e-05, 7.66e-05, 7.591999999999999e-05, 7.526e-05, 7.46e-05, 7.396e-05,
                              7.332e-05, 7.2695e-05, 7.206999999999999e-05, 7.1465e-05, 7.086000000000001e-05,
                              7.027e-05, 6.968e-05, 6.9105e-05, 6.853e-05, 6.7975e-05, 6.742e-05, 6.6875e-05, 6.633e-05,
                              6.58e-05, 6.527e-05, 6.475e-05, 6.423e-05, 6.373e-05, 6.323e-05, 6.2735e-05, 6.224e-05,
                              6.1765e-05, 6.129e-05, 6.0820000000000004e-05, 6.035e-05, 5.9895e-05,
                              5.943999999999999e-05, 5.8995e-05, 5.855e-05, 5.811999999999999e-05, 5.769e-05,
                              5.7265e-05, 5.684e-05, 5.6425e-05, 5.601e-05, 5.561e-05, 5.521e-05, 5.4815e-05, 5.442e-05,
                              5.4035e-05, 5.365e-05, 5.327e-05, 5.2890000000000004e-05, 5.252e-05, 5.215e-05, 5.179e-05,
                              5.143e-05, 5.108e-05, 5.0730000000000004e-05, 5.038499999999999e-05,
                              5.0039999999999995e-05, 4.9705e-05, 4.937e-05, 4.9040000000000005e-05,
                              4.8710000000000006e-05, 4.8385000000000005e-05, 4.8060000000000004e-05, 4.7745e-05,
                              4.743e-05, 4.7114999999999985e-05, 4.679999999999999e-05, 4.6485e-05,
                              4.616999999999998e-05, 4.5854999999999994e-05, 4.553999999999999e-05,
                              4.5224999999999954e-05, 4.490999999999998e-05, 4.459499999999998e-05,
                              4.427999999999994e-05, 4.3964999999999976e-05, 4.365000000000001e-05,
                              4.333499999999997e-05, 4.301999999999993e-05, 4.2704999999999965e-05,
                              4.2389999999999924e-05, 4.207499999999996e-05, 4.175999999999999e-05,
                              4.144499999999995e-05, 4.112999999999992e-05, 4.081499999999995e-05,
                              4.0499999999999914e-05, 4.018499999999994e-05, 3.9869999999999976e-05,
                              3.955500000000001e-05, 3.923999999999997e-05, 3.892499999999993e-05,
                              3.8609999999999896e-05, 3.8295e-05, 3.797999999999996e-05, 3.766499999999992e-05,
                              3.7349999999999885e-05, 3.7034999999999844e-05, 3.671999999999981e-05,
                              3.640499999999977e-05, 3.609000000000001e-05, 3.5774999999999975e-05,
                              3.5459999999999935e-05, 3.51449999999999e-05, 3.482999999999986e-05,
                              3.451499999999982e-05, 3.419999999999992e-05, 3.388499999999989e-05,
                              3.356999999999985e-05, 3.325499999999981e-05, 3.2939999999999776e-05,
                              3.262499999999988e-05, 3.230999999999998e-05, 3.199499999999994e-05, 3.16799999999999e-05,
                              3.1364999999999724e-05, 3.104999999999997e-05, 3.073500000000007e-05,
                              3.0419999999999892e-05, 3.0104999999999994e-05, 2.9789999999999818e-05,
                              2.9474999999999917e-05, 2.916000000000002e-05, 2.8844999999999843e-05,
                              2.8529999999999945e-05, 2.821499999999977e-05, 2.789999999999987e-05,
                              2.7584999999999693e-05, 2.7269999999999795e-05, 2.6954999999999897e-05,
                              2.6639999999999718e-05, 2.632499999999982e-05, 2.6009999999999644e-05,
                              2.5694999999999746e-05, 2.537999999999957e-05, 2.506499999999967e-05,
                              2.474999999999977e-05, 2.4434999999999874e-05, 2.4119999999999976e-05,
                              2.38049999999998e-05, 2.34899999999999e-05, 2.3175e-05, 2.2859999999999825e-05,
                              2.2544999999999927e-05, 2.222999999999975e-05, 2.191499999999985e-05,
                              2.1599999999999675e-05, 2.1284999999999777e-05, 2.096999999999988e-05,
                              2.06549999999997e-05, 2.0339999999999802e-05, 2.0024999999999626e-05,
                              1.9709999999999728e-05, 1.9394999999999553e-05, 1.907999999999965e-05,
                              1.8764999999999753e-05, 1.8449999999999578e-05, 1.813499999999968e-05,
                              1.7819999999999504e-05, 1.750499999999988e-05, 1.7189999999999983e-05,
                              1.6874999999999807e-05, 1.655999999999991e-05, 1.6244999999999734e-05]]]
            self.assertListEqual(result, expected)
        finally:
            pass
        return

    def test_express_extrapolate_f(self):
        """
        unittest for function agdrift.express_extrapolate_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([6.])
            agdrift_empty.out_y = agdrift_empty.pond_ground_low_f2m
            result = agdrift_empty.express_extrapolate_f()
            npt.assert_allclose(result, -0.009548, rtol, 0, '', True)
        finally:
            pass
        return

    def test_deposition_foa_to_gha_f(self):
        """
        unittest for function agdrift.deposition_foa_to_gha_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([130.])
            agdrift_empty.out_y = agdrift_empty.pond_airblast_orchard
            agdrift_empty.application_rate = pd.Series([2.2])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            result = agdrift_empty.deposition_foa_to_gha_f()
            npt.assert_allclose(result, 0.032824, rtol, 0, '', True)
        finally:
            pass
        return

    def test_deposition_foa_to_lbac_f(self):
        """
        unittest for function agdrift.deposition_foa_to_lbac_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([75.])
            agdrift_empty.out_y = agdrift_empty.pond_aerial_vf2f
            agdrift_empty.application_rate = pd.Series([1.7])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            result = agdrift_empty.deposition_foa_to_lbac_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result, 0.22168, rtol, 0, '', True)
        finally:
            pass
        return

    def test_deposition_lbac_to_gha_f(self):
        """
        unittest for function agdrift.deposition_lbac_to_gha_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([12.])
            agdrift_empty.out_y = agdrift_empty.pond_ground_high_f2m
            agdrift_empty.application_rate = pd.Series([2.5])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            result = agdrift_empty.deposition_lbac_to_gha_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result, 1719.102539, rtol, 0, '', True)
        finally:
            pass
        return

    def test_deposition_gha_to_ngl_f(self):
        """
        unittest for function agdrift.deposition_gha_to_ngl_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([128.])
            agdrift_empty.out_y = agdrift_empty.pond_ground_high_f2m
            agdrift_empty.application_rate = pd.Series([5.2])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            agdrift_empty.out_avg_depo_gha = agdrift_empty.deposition_lbac_to_gha_f()
            agdrift_empty.aquatic_type = pd.Series([2.])
            result = agdrift_empty.deposition_gha_to_ngl_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return

    def test_deposition_gha_to_mgcm_f(self):
        """
        unittest for function agdrift.deposition_gha_to_mgcm_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([190.])
            agdrift_empty.out_y = agdrift_empty.pond_ground_low_f2m
            agdrift_empty.application_rate = pd.Series([2.1])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            agdrift_empty.out_avg_depo_gha = agdrift_empty.deposition_lbac_to_gha_f()
            result = agdrift_empty.deposition_gha_to_mgcm_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return

    def test_deposition_ngl_2_gha_f(self):
        """
        unittest for function agdrift.deposition_ngl_2_gha_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([223.])
            agdrift_empty.out_y = agdrift_empty.pond_aerial_f2m
            agdrift_empty.application_rate = pd.Series([5.8])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            agdrift_empty.out_avg_depo_gha = agdrift_empty.deposition_lbac_to_gha_f()
            agdrift_empty.out_deposition_ngl = agdrift_empty.deposition_gha_to_ngl_f()
            agdrift_empty.aquatic_type = pd.Series([1.])
            result = agdrift_empty.deposition_ngl_2_gha_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return

    def test_deposition_ghac_to_lbac_f(self):
        """
        unittest for function agdrift.deposition_ghac_to_lbac_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([270.])
            agdrift_empty.out_y = agdrift_empty.pond_airblast_vineyard
            agdrift_empty.application_rate = pd.Series([6.5])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            agdrift_empty.out_avg_depo_gha = agdrift_empty.deposition_lbac_to_gha_f()
            result = agdrift_empty.deposition_ghac_to_lbac_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return

    def test_deposition_lbac_to_foa_f(self):
        """
        unittest for function agdrift.deposition_lbac_to_foa_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([200.])
            agdrift_empty.out_y = agdrift_empty.pond_ground_low_f2m
            agdrift_empty.application_rate = pd.Series([3.5])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            result = agdrift_empty.deposition_lbac_to_foa_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return

    def test_deposition_mgcm_to_gha_f(self):
        """
        unittest for function agdrift.deposition_mgcm_to_gha_f:
        :return:
        """
        try:
            agdrift_empty.distance = pd.Series([76.])
            agdrift_empty.out_y = agdrift_empty.pond_airblast_vineyard
            agdrift_empty.application_rate = pd.Series([0.23])
            agdrift_empty.out_init_avg_dep_foa = agdrift_empty.express_extrapolate_f()
            agdrift_empty.out_avg_depo_lbac = agdrift_empty.deposition_foa_to_lbac_f()
            agdrift_empty.out_avg_depo_gha = agdrift_empty.deposition_lbac_to_gha_f()
            agdrift_empty.out_deposition_mgcm = agdrift_empty.deposition_gha_to_mgcm_f()
            result = agdrift_empty.deposition_mgcm_to_gha_f()
            #npt.assert_array_almost_equal(result, -0.554622, 4, '', True)
            npt.assert_allclose(result,-0.554622,rtol,0,'',True)
        finally:
            pass
        return
    
# unittest will
# 1) call the setup method
# 2) then call every method starting with "test",
# 3) then the teardown method
if __name__ == '__main__':
    unittest.main()
    #pass
