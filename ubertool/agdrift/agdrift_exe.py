from __future__ import divisionimport loggingimport numpy as npimport pandas as pdimport sqlite3from sqlalchemy import Column, Table,Integer, Float, String, create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker, scoped_sessionfrom sqlalchemy import *metadata = MetaData()from base.uber_model import UberModel, ModelSharedInputsclass AgdriftInputs(ModelSharedInputs):    """    Input class for Agdrift.    """    def __init__(self):        """Class representing the inputs for TerrPlant"""        super(AgdriftInputs, self).__init__()        self.application_rate = pd.Series([], dtype="float")        self.application_method = pd.Series([], dtype="object")        self.drop_size = pd.Series([], dtype="object")        self.ecosystem_type = pd.Series([], dtype="object")        self.boom_height = pd.Series([], dtype="object")        self.orchard_type = pd.Series([], dtype="object")        self.aquatic_type = pd.Series([], dtype="object")        self.calculation_input = pd.Series([], dtype="object")        self.distance = pd.Series([], dtype="float")class AgdriftOutputs(object):    """    Output class for Agdrift.    """    def __init__(self):        """Class representing the outputs for Agdrift"""        super(AgdriftOutputs, self).__init__()        self.out_init_avg_dep_foa = pd.Series(name="out_init_avg_dep_foa").astype("float")        self.out_avg_depo_lbac = pd.Series(name="out_avg_depo_lbac").astype("float")        self.out_avg_depo_gha = pd.Series(name="out_avg_depo_gha").astype("float")        self.out_deposition_ngl = pd.Series(name="out_deposition_ngl").astype("float")        self.out_deposition_mgcm = pd.Series(name="out_deposition_mgcm").astype("float")        self.out_nasae = pd.Series(name="out_nasae").astype("int")        self.out_y = pd.Series(name="out_y").astype("object")        self.out_x = pd.Series(name="out_x").astype("object")        self.out_express_y = pd.Series(name="out_express_y").astype("object")class Agdrift(UberModel, AgdriftInputs, AgdriftOutputs):    """    Agdrift class to implement tier 1 air drift screening models.    """    def __init__(self, pd_obj, pd_obj_exp):        """Class representing the Agdrift model and containing all its methods"""        super(Agdrift, self).__init__()        self.pd_obj = pd_obj        self.pd_obj_exp = pd_obj_exp        self.pd_obj_out = None    def execute_model(self):        """        Callable to execute the running of the model:            1) Populate input parameters            2) Create output DataFrame to hold the model outputs            3) Run the model's methods to generate outputs            4) Fill the output DataFrame with the generated model outputs        """        self.populate_inputs(self.pd_obj)        self.pd_obj_out = self.populate_outputs()        self.run_methods()        self.fill_output_dataframe()        logging.info(self.pd_obj_out)        logging.info('executed agdrift')    def run_methods(self):        """        Controller method that runs all subroutines in sequence.        :return:        """        try:            self.load_data()            #loop over all possible cases            for i in range(self.application_method):                if self.application_method[i] == 'Tier I Aerial':                    self.tier_I_aerial(i)                elif self.application_method[i] == 'Tier I Ground':                    self.tier_I_ground(i)                elif self.application_method[i] == 'Tier I Orchard':                    self.tier_I_airblast(i)                else:                    print('no application method match')            if self.calculation_input[0] == 'Distance':                self.tier_I_aerial()                self.tier_I_ground()                self.tier_I_airblast()                self.express_extrapolate_f()                self.deposition_foa_to_gha_f()                self.deposition_ghac_to_lbac_f()                self.deposition_gha_to_ngl_f()                self.deposition_gha_to_mgcm_f()        except TypeError:            print "Type Error: Your variables are not set correctly."    def load_data(self):        """        Grabbing interpolated output from agdrift model.        :return:        """        self.pond_ground_high_vf2f = [6.164E+00, 4.251E+00, 3.425E+00, 2.936E+00, 2.607E+00, 2.364E+00, 2.173E+00,                                      2.017E+00, 1.886E+00, 1.773E+00, 1.674E+00, 1.586E+00, 1.508E+00, 1.437E+00,                                      1.372E+00, 1.314E+00, 1.260E+00, 1.210E+00, 1.163E+00, 1.120E+00, 1.080E+00,                                      1.042E+00, 1.007E+00, 9.740E-01, 9.427E-01, 9.132E-01, 8.853E-01, 8.588E-01,                                      8.337E-01, 8.099E-01, 7.871E-01, 7.655E-01, 7.449E-01, 7.251E-01, 7.063E-01,                                      6.882E-01, 6.709E-01, 6.544E-01, 6.385E-01, 6.232E-01, 6.085E-01, 5.944E-01,                                      5.808E-01, 5.677E-01, 5.551E-01, 5.429E-01, 5.312E-01, 5.198E-01, 5.089E-01,                                      4.983E-01, 4.880E-01, 4.781E-01, 4.685E-01, 4.592E-01, 4.502E-01, 4.415E-01,                                      4.331E-01, 4.249E-01, 4.169E-01, 4.092E-01, 4.017E-01, 3.944E-01, 3.873E-01,                                      3.804E-01, 3.737E-01, 3.672E-01, 3.609E-01, 3.547E-01, 3.487E-01, 3.428E-01,                                      3.371E-01, 3.316E-01, 3.262E-01, 3.209E-01, 3.157E-01, 3.107E-01, 3.058E-01,                                      3.010E-01, 2.964E-01, 2.918E-01, 2.874E-01, 2.830E-01, 2.788E-01, 2.746E-01,                                      2.706E-01, 2.666E-01, 2.628E-01, 2.590E-01, 2.553E-01, 2.516E-01, 2.481E-01,                                      2.446E-01, 2.412E-01, 2.379E-01, 2.347E-01, 2.315E-01, 2.284E-01, 2.253E-01,                                      2.223E-01, 2.194E-01, 2.165E-01]        self.pond_ground_high_f2m = [1.650E+00, 9.842E-01, 8.413E-01, 7.572E-01, 6.978E-01, 6.515E-01, 6.135E-01,                                     5.813E-01, 5.534E-01, 5.287E-01, 5.067E-01, 4.868E-01, 4.686E-01, 4.520E-01,                                     4.367E-01, 4.225E-01, 4.093E-01, 3.970E-01, 3.854E-01, 3.745E-01, 3.643E-01,                                     3.546E-01, 3.454E-01, 3.368E-01, 3.285E-01, 3.206E-01, 3.131E-01, 3.060E-01,                                     2.991E-01, 2.926E-01, 2.863E-01, 2.803E-01, 2.745E-01, 2.689E-01, 2.636E-01,                                     2.584E-01, 2.535E-01, 2.487E-01, 2.440E-01, 2.396E-01, 2.353E-01, 2.311E-01,                                     2.270E-01, 2.231E-01, 2.193E-01, 2.157E-01, 2.121E-01, 2.086E-01, 2.053E-01,                                     2.020E-01, 1.988E-01, 1.958E-01, 1.928E-01, 1.898E-01, 1.870E-01, 1.842E-01,                                     1.815E-01, 1.789E-01, 1.764E-01, 1.739E-01, 1.714E-01, 1.690E-01, 1.667E-01,                                     1.645E-01, 1.623E-01, 1.601E-01, 1.580E-01, 1.559E-01, 1.539E-01, 1.520E-01,                                     1.500E-01, 1.481E-01, 1.463E-01, 1.445E-01, 1.427E-01, 1.410E-01, 1.393E-01,                                     1.376E-01, 1.360E-01, 1.344E-01, 1.329E-01, 1.313E-01, 1.298E-01, 1.284E-01,                                     1.269E-01, 1.255E-01, 1.241E-01, 1.227E-01, 1.214E-01, 1.201E-01, 1.188E-01,                                     1.175E-01, 1.163E-01, 1.151E-01, 1.139E-01, 1.127E-01, 1.115E-01, 1.104E-01,                                     1.093E-01, 1.082E-01, 1.071E-01]        self.pond_ground_low_vf2f = [2.681E+00, 1.549E+00, 1.250E+00, 1.087E+00, 9.800E-01, 9.006E-01, 8.380E-01,                                     7.864E-01, 7.426E-01, 7.047E-01, 6.714E-01, 6.417E-01, 6.150E-01, 5.908E-01,                                     5.687E-01, 5.484E-01, 5.296E-01, 5.122E-01, 4.960E-01, 4.809E-01, 4.667E-01,                                     4.534E-01, 4.409E-01, 4.290E-01, 4.178E-01, 4.072E-01, 3.971E-01, 3.875E-01,                                     3.783E-01, 3.696E-01, 3.613E-01, 3.533E-01, 3.456E-01, 3.383E-01, 3.313E-01,                                     3.246E-01, 3.181E-01, 3.118E-01, 3.058E-01, 3.000E-01, 2.944E-01, 2.890E-01,                                     2.838E-01, 2.788E-01, 2.739E-01, 2.692E-01, 2.646E-01, 2.602E-01, 2.559E-01,                                     2.517E-01, 2.477E-01, 2.438E-01, 2.400E-01, 2.363E-01, 2.327E-01, 2.292E-01,                                     2.258E-01, 2.225E-01, 2.193E-01, 2.161E-01, 2.131E-01, 2.101E-01, 2.072E-01,                                     2.043E-01, 2.016E-01, 1.989E-01, 1.962E-01, 1.937E-01, 1.911E-01, 1.887E-01,                                     1.863E-01, 1.839E-01, 1.816E-01, 1.794E-01, 1.772E-01, 1.751E-01, 1.730E-01,                                     1.709E-01, 1.689E-01, 1.669E-01, 1.650E-01, 1.631E-01, 1.612E-01, 1.594E-01,                                     1.576E-01, 1.559E-01, 1.542E-01, 1.525E-01, 1.508E-01, 1.492E-01, 1.476E-01,                                     1.461E-01, 1.445E-01, 1.430E-01, 1.415E-01, 1.401E-01, 1.387E-01, 1.373E-01,                                     1.359E-01, 1.345E-01, 1.332E-01]        self.pond_ground_low_f2m = [1.090E+00, 6.124E-01, 5.272E-01, 4.774E-01, 4.422E-01, 4.147E-01, 3.922E-01,                                    3.730E-01, 3.563E-01, 3.416E-01, 3.284E-01, 3.165E-01, 3.056E-01, 2.956E-01,                                    2.863E-01, 2.778E-01, 2.698E-01, 2.623E-01, 2.553E-01, 2.487E-01, 2.425E-01,                                    2.366E-01, 2.311E-01, 2.258E-01, 2.207E-01, 2.159E-01, 2.113E-01, 2.069E-01,                                    2.027E-01, 1.987E-01, 1.948E-01, 1.911E-01, 1.876E-01, 1.841E-01, 1.808E-01,                                    1.776E-01, 1.746E-01, 1.716E-01, 1.687E-01, 1.659E-01, 1.633E-01, 1.607E-01,                                    1.581E-01, 1.557E-01, 1.533E-01, 1.510E-01, 1.488E-01, 1.466E-01, 1.445E-01,                                    1.425E-01, 1.405E-01, 1.385E-01, 1.366E-01, 1.348E-01, 1.330E-01, 1.312E-01,                                    1.295E-01, 1.279E-01, 1.263E-01, 1.247E-01, 1.231E-01, 1.216E-01, 1.201E-01,                                    1.187E-01, 1.173E-01, 1.159E-01, 1.145E-01, 1.132E-01, 1.119E-01, 1.107E-01,                                    1.094E-01, 1.082E-01, 1.070E-01, 1.059E-01, 1.047E-01, 1.036E-01, 1.025E-01,                                    1.014E-01, 1.004E-01, 9.935E-02, 9.834E-02, 9.734E-02, 9.637E-02, 9.541E-02,                                    9.447E-02, 9.354E-02, 9.263E-02, 9.174E-02, 9.087E-02, 9.001E-02, 8.916E-02,                                    8.833E-02, 8.751E-02, 8.671E-02, 8.591E-02, 8.514E-02, 8.437E-02, 8.362E-02,                                    8.288E-02, 8.215E-02, 8.143E-02]        self.pond_aerial_vf2f = [2.425E+01, 2.319E+01, 2.227E+01, 2.144E+01, 2.069E+01, 1.997E+01, 1.930E+01, 1.866E+01,                                 1.806E+01, 1.749E+01, 1.696E+01, 1.645E+01, 1.596E+01, 1.549E+01, 1.506E+01, 1.464E+01,                                 1.425E+01, 1.388E+01, 1.353E+01, 1.320E+01, 1.288E+01, 1.257E+01, 1.228E+01, 1.200E+01,                                 1.174E+01, 1.149E+01, 1.125E+01, 1.103E+01, 1.081E+01, 1.059E+01, 1.039E+01, 1.020E+01,                                 1.001E+01, 9.837E+00, 9.670E+00,                                 9.510E+00, 9.350E+00, 9.200E+00, 9.058E+00, 8.920E+00, 8.780E+00, 8.650E+00, 8.520E+00,                                 8.400E+00, 8.290E+00, 8.170E+00, 8.060E+00, 7.950E+00, 7.850E+00, 7.750E+00, 7.650E+00,                                 7.554E+00, 7.460E+00, 7.370E+00, 7.290E+00, 7.200E+00, 7.120E+00, 7.040E+00, 6.960E+00,                                 6.880E+00, 6.810E+00, 6.741E+00, 6.670E+00, 6.600E+00, 6.540E+00, 6.470E+00, 6.410E+00,                                 6.350E+00, 6.290E+00, 6.230E+00, 6.170E+00, 6.120E+00, 6.060E+00, 6.010E+00, 5.960E+00,                                 5.904E+00, 5.850E+00, 5.806E+00, 5.760E+00, 5.710E+00, 5.670E+00, 5.624E+00, 5.580E+00,                                 5.540E+00, 5.490E+00, 5.450E+00, 5.413E+00, 5.370E+00, 5.340E+00, 5.300E+00, 5.260E+00,                                 5.230E+00, 5.190E+00, 5.160E+00, 5.120E+00, 5.090E+00, 5.060E+00, 5.030E+00, 5.000E+00,                                 4.970E+00, 4.940E+00]        self.pond_aerial_f2m = [1.266E+01, 1.142E+01, 1.050E+01, 9.757E+00, 9.147E+00, 8.623E+00, 8.146E+00,                                7.698E+00, 7.271E+00, 6.871E+00, 6.509E+00, 6.188E+00, 5.899E+00, 5.635E+00,                                5.388E+00, 5.160E+00, 4.953E+00, 4.765E+00, 4.594E+00, 4.437E+00, 4.291E+00,                                4.154E+00, 4.025E+00, 3.903E+00, 3.789E+00, 3.682E+00, 3.581E+00, 3.488E+00,                                3.403E+00, 3.323E+00, 3.245E+00, 3.170E+00, 3.097E+00, 3.027E+00, 2.961E+00,                                2.898E+00, 2.839E+00, 2.783E+00, 2.729E+00, 2.677E+00, 2.627E+00, 2.579E+00,                                2.533E+00, 2.488E+00, 2.446E+00, 2.405E+00, 2.366E+00, 2.329E+00, 2.292E+00,                                2.258E+00, 2.225E+00, 2.193E+00, 2.162E+00, 2.132E+00, 2.104E+00, 2.076E+00,                                2.049E+00, 2.023E+00, 1.998E+00, 1.974E+00, 1.950E+00, 1.928E+00, 1.905E+00,                                1.884E+00, 1.863E+00, 1.842E+00, 1.823E+00, 1.804E+00, 1.785E+00, 1.767E+00,                                1.749E+00, 1.732E+00, 1.715E+00, 1.698E+00, 1.683E+00, 1.667E+00, 1.652E+00,                                1.637E+00, 1.623E+00, 1.608E+00, 1.595E+00, 1.581E+00, 1.568E+00, 1.555E+00,                                1.543E+00, 1.531E+00, 1.519E+00, 1.507E+00, 1.496E+00, 1.485E+00, 1.474E+00,                                1.464E+00, 1.454E+00, 1.444E+00, 1.434E+00, 1.425E+00, 1.416E+00, 1.407E+00,                                1.398E+00, 1.389E+00, 1.381E+00]        self.pond_aerial_m2c = [8.918E+00, 7.649E+00, 6.759E+00, 6.103E+00, 5.593E+00, 5.180E+00, 4.829E+00,                                4.513E+00, 4.217E+00, 3.934E+00, 3.670E+00, 3.437E+00, 3.239E+00, 3.070E+00,                                2.920E+00, 2.782E+00, 2.654E+00, 2.535E+00, 2.426E+00, 2.324E+00, 2.232E+00,                                2.149E+00, 2.072E+00, 2.001E+00, 1.933E+00, 1.869E+00, 1.808E+00, 1.750E+00,                                1.696E+00, 1.645E+00, 1.598E+00, 1.553E+00, 1.511E+00, 1.471E+00, 1.434E+00,                                1.399E+00, 1.365E+00, 1.334E+00, 1.304E+00, 1.276E+00, 1.249E+00, 1.223E+00,                                1.198E+00, 1.175E+00, 1.153E+00, 1.132E+00, 1.113E+00, 1.094E+00, 1.076E+00,                                1.058E+00, 1.041E+00, 1.026E+00, 1.010E+00, 9.957E-01, 9.816E-01, 9.681E-01,                                9.551E-01, 9.427E-01, 9.307E-01, 9.191E-01, 9.080E-01, 8.972E-01, 8.868E-01,                                8.768E-01, 8.671E-01, 8.578E-01, 8.487E-01, 8.399E-01, 8.313E-01, 8.231E-01,                                8.151E-01, 8.073E-01, 7.998E-01, 7.926E-01, 7.855E-01, 7.787E-01, 7.720E-01,                                7.655E-01, 7.591E-01, 7.529E-01, 7.468E-01, 7.409E-01, 7.352E-01, 7.296E-01,                                7.242E-01, 7.188E-01, 7.136E-01, 7.085E-01, 7.035E-01, 6.986E-01, 6.939E-01,                                6.892E-01, 6.847E-01, 6.802E-01, 6.758E-01, 6.716E-01, 6.674E-01, 6.633E-01,                                6.593E-01, 6.554E-01, 6.516E-01]        self.pond_aerial_c2vc = [6.879E+00, 5.622E+00, 4.785E+00, 4.190E+00, 3.747E+00, 3.401E+00, 3.123E+00,                                 2.893E+00, 2.692E+00, 2.505E+00, 2.331E+00, 2.175E+00, 2.043E+00, 1.930E+00,                                 1.830E+00, 1.738E+00, 1.653E+00, 1.574E+00, 1.501E+00, 1.434E+00, 1.373E+00,                                 1.318E+00, 1.268E+00, 1.221E+00, 1.178E+00, 1.137E+00, 1.099E+00, 1.064E+00,                                 1.031E+00, 1.000E+00, 9.720E-01, 9.456E-01, 9.208E-01, 8.977E-01, 8.761E-01,                                 8.559E-01, 8.369E-01, 8.190E-01, 8.020E-01, 7.858E-01, 7.705E-01, 7.559E-01,                                 7.420E-01, 7.287E-01, 7.161E-01, 7.039E-01, 6.923E-01, 6.811E-01, 6.703E-01,                                 6.599E-01, 6.497E-01, 6.399E-01, 6.304E-01, 6.211E-01, 6.121E-01, 6.034E-01,                                 5.948E-01, 5.865E-01, 5.783E-01, 5.703E-01, 5.626E-01, 5.550E-01, 5.476E-01,                                 5.403E-01, 5.332E-01, 5.263E-01, 5.194E-01, 5.127E-01, 5.062E-01, 4.998E-01,                                 4.935E-01, 4.874E-01, 4.815E-01, 4.756E-01, 4.699E-01, 4.643E-01, 4.589E-01,                                 4.536E-01, 4.484E-01, 4.434E-01, 4.384E-01, 4.336E-01, 4.290E-01, 4.244E-01,                                 4.200E-01, 4.157E-01, 4.115E-01, 4.075E-01, 4.035E-01, 3.997E-01, 3.960E-01,                                 3.924E-01, 3.889E-01, 3.855E-01, 3.822E-01, 3.790E-01, 3.759E-01, 3.729E-01,                                 3.700E-01, 3.671E-01, 3.644E-01]        self.pond_airblast_orchard = [2.180E+00, 1.642E+00, 1.301E+00, 1.067E+00, 8.998E-01, 7.748E-01, 6.784E-01,                                      6.021E-01, 5.404E-01, 4.896E-01, 4.472E-01, 4.112E-01, 3.805E-01, 3.539E-01,                                      3.307E-01, 3.103E-01, 2.922E-01, 2.761E-01, 2.617E-01, 2.487E-01, 2.369E-01,                                      2.262E-01, 2.164E-01, 2.075E-01, 1.992E-01, 1.916E-01, 1.846E-01, 1.781E-01,                                      1.720E-01, 1.663E-01, 1.610E-01, 1.561E-01, 1.514E-01, 1.470E-01, 1.429E-01,                                      1.389E-01, 1.352E-01, 1.317E-01, 1.284E-01, 1.252E-01, 1.222E-01, 1.194E-01,                                      1.166E-01, 1.140E-01, 1.115E-01, 1.092E-01, 1.069E-01, 1.047E-01, 1.026E-01,                                      1.005E-01, 9.861E-02, 9.674E-02, 9.493E-02, 9.320E-02, 9.152E-02, 8.991E-02,                                      8.835E-02, 8.684E-02, 8.538E-02, 8.397E-02, 8.261E-02, 8.128E-02, 8.000E-02,                                      7.876E-02, 7.755E-02, 7.638E-02, 7.525E-02, 7.414E-02, 7.307E-02, 7.202E-02,                                      7.101E-02, 7.002E-02, 6.906E-02, 6.812E-02, 6.721E-02, 6.632E-02, 6.545E-02,                                      6.461E-02, 6.378E-02, 6.297E-02, 6.219E-02, 6.142E-02, 6.067E-02, 5.994E-02,                                      5.922E-02, 5.852E-02, 5.784E-02, 5.717E-02, 5.651E-02, 5.587E-02, 5.524E-02,                                      5.463E-02, 5.403E-02, 5.344E-02, 5.286E-02, 5.229E-02, 5.174E-02, 5.119E-02,                                      5.066E-02, 5.014E-02, 4.962E-02]        self.pond_airblast_vineyard = self.load_pond_airblast_vineyard()    def tier_I_aerial(self, i):        logging.info('------------- Agdrift results' + self.ecosystem_type[0] + self.application_method[0] + self.drop_size[0])        # TIER I AERIAL        if self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Aerial' and self.drop_size[i] == 'Fine':            self.out_y[i] = [self.pond_aerial_vf2f]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[0] = [0]            self.out_express_y[i] =            self.out_x[i] =        # TIER I AERIAL        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Aerial' and self.drop_size[i] == 'Medium'):            self.out_y[i] = [self.pond_aerial_f2m]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [1]            self.out_express_y[i] =            self.out_x[i] =        # TIER I AERIAL        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Aerial' and self.drop_size[i] == 'Coarse'):            self.out_y[i] = [self.pond_aerial_m2c]            self.out_nasae[i] = [2]            self.out_express_y[i] =            self.out_x[i] =        # TIER I AERIAL        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Aerial' and self.drop_size[i] == 'Very Coarse'):            self.out_y[i] = self.pond_aerial_c2vc            #python 3 = list(map(str,self.pond_aerial_c2vc))            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [3]            self.out_express_y[i] =            self.out_x[i] =        else:            self.out_y[i] = [3]    def tier_I_ground(self, i):        logging.info('------------- Agdrift results' + self.ecosystem_type[0] + self.application_method[0] + self.drop_size[0] + self.boom_height[0])        # TIER I GROUND        if (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Ground' and self.drop_size[i] == 'Fine' and self.boom_height[i] == 'low'):            self.out_y[i] = [self.pond_ground_low_vf2f]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [4]            self.out_express_y[i] =            self.out_x[i] =        # TIER I GROUND        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Ground' and self.drop_size[i] == 'Medium' and self.boom_height[i] == 'low'):            self.out_y[i] = [self.pond_ground_low_f2m]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [6]            self.out_express_y[i] =            self.out_x[i] =        # TIER I GROUND        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Ground' and                      self.drop_size[i] == 'Fine' and self.boom_height[i] == 'High'):            self.out_y[i] = [self.pond_ground_high_vf2f] #??            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [5]            self.out_express_y[i] =            self.out_x[i] =        # TIER I GROUND        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Ground' and self.drop_size[i] == 'Medium' and self.boom_height[i] == 'High'):            self.out_y[i] = [self.pond_ground_high_f2m]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [7]            self.out_express_y[i] =            self.out_x[i] =    # TIER I ORCHARD/AIRBLAST    def tier_I_airblast(self, i):        logging.info('------------- Agdrift results' + self.ecosystem_type[0] + self.application_method[0] + self.orchard_type[0])        if (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Orchard/Airblast' and self.orchard_type[i] == 'Orchard'):            self.out_y[i] = [self.pond_airblast_orchard]            # self.out_x[0] = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            self.out_nasae[i] = [9]            self.out_express_y[i] =            self.out_x[i] =        # TIER I ORCHARD/AIRBLAST        elif (self.ecosystem_type[i] == 'EPA Pond' and self.application_method[i] == 'Orchard/Airblast' and self.orchard_type[i] == 'Vineyard'):            self.out_y[i] = [self.pond_airblast_vineyard]            self.out_express_y[i] =            self.out_x[i] =            self.out_nasae[i] = [8]        else:            self.out_y[i] = [3]    def express_extrapolate_f(self):        """        Extrapolate results from express implementation.        :param out_y:        :param out_nasae:        :param distance:        :return:        """        # XV = np.array([X0, X1, X2, X3, X4, X5, X6, X7, X8, X9])        # NASAE1=int(self.out_nasae[0])-1        # N=max(0,min(9,(self.out_nasae[0]-1)))        # I=max(0,min(99,int(0.5*int(self.distance[0]))+1))        i_f = max(1, min(100, int(0.5 * int(self.distance)) + 1))        ym = 2.0 * (i_f - 1)        yp = 2.0 * i_f        i = i_f - 1  # to account for python being zero based        self.out_init_avg_dep_foa = [(0.5 * (self.out_y[i] * (yp - int(self.distance)) + self.out_y[i + 1] *                                     (int(self.distance) - ym))) / 100]        return self.out_init_avg_dep_foa    # def extrapolate_from_fig(self, bisect_left, out_x):    #     """    #     Extrapolating from nearest figure points.    #     :param ecosystem_type:    #     :param distance:    #     :param bisect_left:    #     :param out_x:    #     :param out_y:    #     :return:    #     """    #     #self.distance = int(self.distance)    #     if self.distance[0] in self.out_x:    #         y_index = out_x.index(self.distance[0])    #         self.out_init_avg_dep_foa = [self.out_y[y_index]]    #     else:    #         i = bisect_left(self.out_x, self.distance[0])  # find largest distance closest to value    #         low1 = self.out_x[0][i - 1]  # assign nearest lowest out_x value for interpolation    #         high1 = self.out_x[0][i]  # assign nearest highest out_x value for interpolation    #         low_i = i - 1  # assign index values to use to find nearest out_y values for interpolation    #         high_i = i  # assign index values to use to find nearest out_y values for interpolation    #         self.out_init_avg_dep_foa = [((self.distance[0] - low1) * (self.out_y[0][high_i] - self.out_y[0][low_i]) / (high1 - low1)) + \    #                                 self.out_y[0][low_i]]    #     return self.out_init_avg_dep_foa    # def extrapolate_from_fig2(self, out_y):    #     """    #     Extrapolating from nearest figure points, alternative figure.    #     :param ecosystem_type:    #     :param out_init_avg_dep_foa:    #     :param bisect_left:    #     :param out_x:    #     :param out_y:    #     :return:    #     """    #     #self.out_init_avg_dep_foa = float(self.out_init_avg_dep_foa)    #     if self.out_init_avg_dep_foa in self.out_y:    #         x_index = out_y.index(self.out_init_avg_dep_foa[0])    #         self.distance[0] = self.out_x[x_index]    #     else:    #         i = min(enumerate(self.out_y), key=lambda out_x: abs(    #                 out_x[1] - self.out_init_avg_dep_foa))  # finds smallest closest value closest to input value    #         i2 = i[0]    #         low1 = self.out_y[i2]  # assign nearest lowest out_x value for interpolation    #         high1 = self.out_y[i2 - 1]  # assign nearest highest out_x value for interpolation    #         low_i = i2  # assign index values to use to find nearest out_y values for interpolation    #         high_i = i2 - 1  # assign index values to use to find nearest out_y values for interpolation    #         self.distance[0] = ((self.out_init_avg_dep_foa[0] - low1) * (self.out_x[high_i] - self.out_x[low_i]) / (high1 - low1)) + \    #                         self.out_x[low_i]    #     return self.distance    def deposition_foa_to_gha_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        self.out_avg_depo_gha = [self.out_init_avg_dep_foa * 100.0 * self.application_rate * 10.0]        return self.out_avg_depo_gha    def deposition_foa_to_lbac_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.application_rate = float(self.application_rate)        # print self.application_rate        # print self.out_init_avg_dep_foa        self.out_avg_depo_lbac = [self.out_init_avg_dep_foa * self.application_rate]        # print self.out_avg_depo_lbac        return self.out_avg_depo_lbac    def deposition_lbac_to_gha_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.out_avg_depo_lbac = float(self.out_avg_depo_lbac)        self.out_avg_depo_gha = [(self.out_avg_depo_lbac[0] * 453.592) / 0.404686]        # print self.out_avg_depo_gha        return self.out_avg_depo_gha    def deposition_gha_to_ngl_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        if (self.aquatic_type == '1'):            self.out_deposition_gha_ngl_f = [self.out_avg_depo_gha * 0.05 * 1000.0]        else:            self.out_deposition_ngl_f = [self.out_avg_depo_gha * 0.05 * 1000.0 * (6.56 / 0.4921)]        return self.out_deposition_gha_ngl_f    def deposition_gha_to_mgcm_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        self.out_deposition_mgcm = [self.out_avg_depo_gha * 0.00001]        return self.out_deposition_mgcm    def deposition_ngl_2_gha_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.out_deposition_ngl = float(self.out_deposition_ngl)        if (self.aquatic_type == '1'):            self.deposition_ngl_2_gha_f = [self.out_deposition_ngl[0] / (0.05 * 1000)]        else:            self.deposition_ngl_2_gha_f = [((self.out_deposition_ngl[0]/6.56) * 0.4921) / (0.05 * 1000)]        return self.deposition_ngl_2_gha_f    def deposition_ghac_to_lbac_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.out_avg_depo_gha = float(self.out_avg_depo_gha)        self.out_avg_depo_lbac = [(self.out_avg_depo_gha[0] * 0.00220462 / 2.47105)]        return self.out_avg_depo_lbac    def deposition_lbac_to_foa_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.application_rate = float(self.application_rate)        self.out_init_avg_dep_foa = [self.out_avg_depo_lbac[0] / self.application_rate[0]]        return self.out_init_avg_dep_foa    def deposition_mgcm_to_gha_f(self):        """        Deposition calculation.        :param out_init_avg_dep_foa:        :param application_rate:        :return:        """        #self.out_deposition_mgcm = float(self.out_deposition_mgcm)        self.out_avg_depo_gha = [self.out_deposition_mgcm[0] / 0.00001]        return self.out_avg_depo_gha                # elif (self.calculation_input == 'Fraction'):                #     self.extrapolate_from_fig2(self.out_y)                #     self.deposition_foa_to_lbac_f()                #     self.deposition_lbac_to_gha_f()                #     self.deposition_gha_to_ngl_f()                #     self.deposition_gha_to_mgcm_f()                # elif (self.calculation_input == 'Initial Average Deposition (g/ha)'):                #     self.deposition_ghac_to_lbac_f()                #     self.deposition_lbac_to_foa_f()                #     self.extrapolate_from_fig2(self.out_y)                #     self.deposition_gha_to_ngl_f()                #     self.deposition_gha_to_mgcm_f()                # elif (self.calculation_input == 'Initial Average Deposition (lb/ac)'):                #     print self.out_avg_depo_lbac                #     self.deposition_lbac_to_gha_f()                #     self.deposition_gha_to_ngl_f()                #     self.deposition_gha_to_mgcm_f()                #     self.deposition_lbac_to_foa_f()                #     self.extrapolate_from_fig2(self.out_y)                # elif (self.calculation_input == 'Initial Average Concentration (ng/l)'):                #     self.deposition_ngl_2_gha_f()                #     self.deposition_ghac_to_lbac_f()                #     self.deposition_lbac_to_foa_f()                #     self.extrapolate_from_fig2(self.out_y)                #     self.deposition_gha_to_mgcm_f()                # else:                #     self.deposition_mgcm_to_gha_f()                #     self.deposition_ghac_to_lbac_f()                #     self.deposition_lbac_to_foa_f()                #     self.extrapolate_from_fig2(self.out_y)                #     self.deposition_gha_to_ngl_f()        # def results(self):        #     self.pond_ground_high_vf2f = [0.0616,0.0572,0.0455,0.0376,0.0267,0.0194,0.013,0.0098,0.0078,0.0064,0.0053,0.0046,0.0039,0.0035,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014,0.0013,0.0012]        #     self.pond_ground_high_f2m = [0.0165,0.0137,0.0104,0.009,0.0071,0.0056,0.0042,0.0034,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.00095,0.0009,0.0008,0.0008,0.0007,0.0007]        #     self.pond_ground_low_vf2f = [0.0268,0.0231,0.0167,0.0136,0.01,0.0076,0.0054,0.0043,0.0036,0.0031,0.0027,0.0024,0.0021,0.0019,0.0017,0.0016,0.0015,0.0013,0.0012,0.0012,0.0011,0.001,0.001,0.0009,0.0009]        #     self.pond_ground_low_f2m = [0.0109,0.0086,0.0065,0.0056,0.0045,0.0036,0.0028,0.0023,0.0019,0.0017,0.0015,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008,0.0007,0.0007,0.0006,0.0006,0.0006,0.0006]        # #####one less value (begin)        #     self.pond_aerial_vf2f = [0.2425,0.2409,0.2344,0.2271,0.2083,0.1829,0.1455,0.1204,0.103,0.0904,0.0809,0.0734,0.0674,0.0625,0.0584,0.055,0.0521,0.0497,0.0476,0.0458,0.0442,0.0428,0.0416,0.0405,0.0396]        #     self.pond_aerial_f2m = [0.1266,0.1247,0.1172,0.1094,0.0926,0.0743,0.0511,0.0392,0.0321,0.0272,0.0238,0.0212,0.0193,0.0177,0.0165,0.0155,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117,0.0114,0.0111]        #     self.pond_aerial_m2c = [0.0892,0.0900,0.0800,0.0700,0.0600,0.0400,0.0300,0.0200,0.0200,0.0130,0.0112,0.0099,0.0090,0.0083,0.0077,0.0073,0.0069,0.0066,0.0063,0.0060,0.0058,0.0056,0.0055,0.0053,0.0052]        #     self.pond_aerial_c2vc = [0.0892,0.0900,0.0800,0.0700,0.0600,0.0400,0.0300,0.0200,0.0200,0.0130,0.0112,0.0099,0.0090,0.0083,0.0077,0.0073,0.0069,0.0066,0.0063,0.0060,0.0058,0.0056,0.0055,0.0053,0.0052]        #     self.terr_aerial_vf2f = [0.5000,0.4913,0.4564,0.4220,0.3588,0.3039,0.2247,0.1741,0.1403,0.1171,0.1010,0.0893,0.0799,0.0729,0.0671,0.0626,0.0585,0.0550,0.0519,0.0494,0.0475,0.0458,0.0442,0.0428,0.0416]        #     self.terr_aerial_f2m = [0.4999,0.4808,0.4046,0.3365,0.2231,0.1712,0.0979,0.0638,0.0469,0.0374,0.0312,0.0266,0.0234,0.021,0.0192,0.0177,0.0164,0.0154,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117]        #     self.terr_aerial_m2c =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]        #     self.terr_aerial_c2vc =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]        #     self.terr_ground_vf2f = [1.06,0.8564,0.4475,0.2595,0.104,0.05,0.0248,0.0164,0.012,0.0093,0.0075,0.0062,0.0053,0.0045,0.0039,0.0034,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014]        # #####one less value (end)        #     self.terr_ground_f2m = [1.01,0.3731,0.0889,0.0459,0.0208,0.0119,0.007,0.0051,0.004,0.0033,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008]        #     self.pond_airblast_normal = [0.0011,0.0011,0.001,0.0009,0.0007,0.0005,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000978,0.0000863,0.0000769,0.0000629,0.0000626,0.0000571,0.0000523,0.0000482,0.0000446,0.0000414,0.0000386,0.0000361,0.0000339]        #     self.pond_airblast_dense = [0.0145,0.014,0.0122,0.0106,0.0074,0.005,0.003,0.0022,0.0017,0.0014,0.0012,0.0011,0.001,0.0009,0.0008,0.0007,0.0007,0.0006,0.0006,0.0005,0.0005,0.0005,0.0005,0.0004,0.0004]        #     self.pond_airblast_sparse = [0.0416,0.0395,0.0323,0.0258,0.015,0.0077,0.0031,0.0017,0.001,0.0007,0.0005,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000898,0.0000771,0.0000668,0.0000583,0.0000513,0.0000453,0.0000405]        #     self.pond_airblast_vineyard = [0.0024,0.0023,0.0018,0.0014,0.0009,0.0006,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.0000881,0.0000765,0.0000672,0.0000596,0.0000533,0.000048,0.0000435,0.0000397,0.0000363,0.0000334,0.0000309,0.0000286,0.0000267]        #     self.pond_airblast_orchard = [0.0218,0.0208,0.0175,0.0145,0.0093,0.0056,0.0031,0.0021,0.0016,0.0013,0.0011,0.0009,0.0008,0.0007,0.0007,0.0006,0.0005,0.0005,0.0005,0.0004,0.0004,0.0004,0.0004,0.0003,0.0003]        #     self.terr_airblast_normal = [0.0089,0.0081,0.0058,0.0042,0.0023,0.0012,0.0006,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000965,0.0000765,0.0000625,0.0000523,0.0000446,0.0000387]        #     self.terr_airblast_dense = [0.1155,0.1078,0.0834,0.0631,0.033,0.0157,0.0065,0.0038,0.0026,0.002,0.0016,0.0014,0.0012,0.0011,0.0009,0.0008,0.0007,0.0006,0.0005,0.0005]        #     self.terr_airblast_sparse = [0.4763,0.4385,0.3218,0.2285,0.1007,0.0373,0.0103,0.0044,0.0023,0.0014,0.0009,0.0006,0.0005,0.0004,0.0003,0.0002,0.0001,0.0000889,0.0000665,0.0000514]        #     self.terr_airblast_vineyard = [0.0376,0.0324,0.0195,0.012,0.0047,0.0019,0.0008,0.0004,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.000087,0.0000667,0.0000531,0.0000434,0.0000363,0.000031]        #     self.terr_airblast_orchard = [0.2223,0.2046,0.1506,0.108,0.0503,0.021,0.0074,0.004,0.0026,0.0019,0.0015,0.0012,0.0011,0.0009,0.0008,0.0006,0.0005,0.0005,0.0004,0.0004]        #     if (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):        #         self.out_y = self.pond_aerial_vf2f        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):        #         self.out_y = self.pond_aerial_f2m        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):        #         self.out_y = self.pond_aerial_m2c        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):        #         self.out_y = self.pond_aerial_c2vc        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'low'):        #         self.out_y = self.pond_ground_low_vf2f        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'low'):        #         self.out_y = self.pond_ground_low_f2m        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'High'):        #         self.out_y = self.pond_ground_high_vf2f        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'High'):        #         self.out_y = self.pond_ground_high_f2m        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):        #         self.out_y = self.terr_aerial_vf2f        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):        #         self.out_y = self.terr_aerial_f2m        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):        #         self.out_y = self.terr_aerial_m2c        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):        #         self.out_y = self.terr_aerial_c2vc        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Fine'):        #         self.out_y = self.terr_ground_vf2f        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Medium'):        #         self.out_y = self.terr_ground_f2m        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):        #         self.out_y = self.pond_airblast_normal        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):        #         self.out_y = self.pond_airblast_dense        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):        #         self.out_y = self.pond_airblast_sparse        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):        #         self.out_y = self.pond_airblast_vineyard        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):        #         self.out_y = pond_airblast_orchard        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):        #         self.out_y = self.terr_airblast_normal        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):        #         self.out_y = self.terr_airblast_dense        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):        #         self.out_y = self.terr_airblast_sparse        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):        #         self.out_y = self.terr_airblast_vineyard        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]        #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):        #         self.out_y = self.terr_airblast_orchard        #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]        #         self.z = 4        #     else:        #         #print 2        #         self.out_y = 3        #     return self.out_x, self.out_y        #     self.terr_aerial_vf2f = [0.5000,0.4913,0.4564,0.4220,0.3588,0.3039,0.2247,0.1741,0.1403,0.1171,0.1010,0.0893,0.0799,0.0729,0.0671,0.0626,0.0585,0.0550,0.0519,0.0494,0.0475,0.0458,0.0442,0.0428,0.0416]        #     self.terr_aerial_f2m = [0.4999,0.4808,0.4046,0.3365,0.2231,0.1712,0.0979,0.0638,0.0469,0.0374,0.0312,0.0266,0.0234,0.021,0.0192,0.0177,0.0164,0.0154,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117]        #     self.terr_aerial_m2c =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]        #     self.terr_aerial_c2vc =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]        #     self.terr_ground_vf2f = [1.06,0.8564,0.4475,0.2595,0.104,0.05,0.0248,0.0164,0.012,0.0093,0.0075,0.0062,0.0053,0.0045,0.0039,0.0034,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014]        # #####one less value (end)        #     self.terr_ground_f2m = [1.01,0.3731,0.0889,0.0459,0.0208,0.0119,0.007,0.0051,0.004,0.0033,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008]        #     self.pond_airblast_normal = [0.0011,0.0011,0.001,0.0009,0.0007,0.0005,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000978,0.0000863,0.0000769,0.0000629,0.0000626,0.0000571,0.0000523,0.0000482,0.0000446,0.0000414,0.0000386,0.0000361,0.0000339]        #     self.pond_airblast_dense = [0.0145,0.014,0.0122,0.0106,0.0074,0.005,0.003,0.0022,0.0017,0.0014,0.0012,0.0011,0.001,0.0009,0.0008,0.0007,0.0007,0.0006,0.0006,0.0005,0.0005,0.0005,0.0005,0.0004,0.0004]        #     self.pond_airblast_orchard = [0.0218,0.0208,0.0175,0.0145,0.0093,0.0056,0.0031,0.0021,0.0016,0.0013,0.0011,0.0009,0.0008,0.0007,0.0007,0.0006,0.0005,0.0005,0.0005,0.0004,0.0004,0.0004,0.0004,0.0003,0.0003]        #     self.terr_airblast_normal = [0.0089,0.0081,0.0058,0.0042,0.0023,0.0012,0.0006,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000965,0.0000765,0.0000625,0.0000523,0.0000446,0.0000387]        #     self.terr_airblast_dense = [0.1155,0.1078,0.0834,0.0631,0.033,0.0157,0.0065,0.0038,0.0026,0.002,0.0016,0.0014,0.0012,0.0011,0.0009,0.0008,0.0007,0.0006,0.0005,0.0005]        #     self.terr_airblast_sparse = [0.4763,0.4385,0.3218,0.2285,0.1007,0.0373,0.0103,0.0044,0.0023,0.0014,0.0009,0.0006,0.0005,0.0004,0.0003,0.0002,0.0001,0.0000889,0.0000665,0.0000514]        #     self.terr_airblast_vineyard = [0.0376,0.0324,0.0195,0.012,0.0047,0.0019,0.0008,0.0004,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.000087,0.0000667,0.0000531,0.0000434,0.0000363,0.000031]        #     self.terr_airblast_orchard = [0.2223,0.2046,0.1506,0.108,0.0503,0.021,0.0074,0.004,0.0026,0.0019,0.0015,0.0012,0.0011,0.0009,0.0008,0.0006,0.0005,0.0005,0.0004,0.0004]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):            #         self.out_y = self.terr_aerial_vf2f            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):            #         self.out_y = self.terr_aerial_f2m            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):            #         self.out_y = self.terr_aerial_m2c            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):            #         self.out_y = self.terr_aerial_c2vc            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Fine'):            #         self.out_y = self.terr_ground_vf2f            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Medium'):            #         self.out_y = self.terr_ground_f2m            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):            #         self.out_y = self.pond_airblast_normal            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):            #         self.out_y = self.pond_airblast_dense            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):            #         self.out_y = pond_airblast_orchard            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):            #         self.out_y = self.terr_airblast_normal            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):            #         self.out_y = self.terr_airblast_dense            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):            #         self.out_y = self.terr_airblast_sparse            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):            #         self.out_y = self.terr_airblast_vineyard            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):            #         self.out_y = self.terr_airblast_orchard            #         self.out_x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            #         self.z = 4    # def load_pond_ground_high_vf2f(self):    #     conn = sqlite3.connect('agdrift.db')    #     cur = conn.cursor()    #     cur.execute("SELECT pond_ground_high_vf2f  from output")    #     pond_ground_high_vf2fs = cur.fetchall()    #     pond_ground_high_vf2fs = np.array(pond_ground_high_vf2fs).astype('float').flatten()    #     cur.close()    #     conn.close()    #     return pond_ground_high_vf2fsdef get_pond_ground_high_vf2f(self):    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_ground_high_vf2f from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_ground_high_f2m():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_ground_high_f2m from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_ground_low_f2m():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_ground_low_f2m from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_ground_low_vf2f():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_ground_low_vf2f from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_aerial_vf2f():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_aerial_vf2f from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_aerial_f2m():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_aerial_f2m from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_aerial_m2c():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_aerial_m2c from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_aerial_c2vc():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_aerial_c2vc from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_airblast_orchard():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_airblast_orchard from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return datadef get_pond_airblast_vineyard():    engine = create_engine('sqlite:///sqlite_agdrift.db')    conn = engine.connect()    result = conn.execute("SELECT pond_airblast_vineyard from output")    data = np.zeros(300)    for i, row in enumerate(result):        temp = float(row[0])        data[i] = temp.real    conn.close()    return data